/*
 HJB (HTTP JMS Bridge) links the HTTP protocol to the JMS API.
 Copyright (C) 2006 Timothy Emiola

 HJB is free software; you can redistribute it and/or modify it under
 the terms of the GNU Lesser General Public License as published by the
 Free Software Foundation; either version 2.1 of the License, or (at
 your option) any later version.

 This library is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301
 USA

 */
package hjb.http.cmd;

import java.io.IOException;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import hjb.jms.HJBRoot;
import hjb.jms.cmd.JMSCommand;
import hjb.jms.cmd.JMSCommandRunner;
import hjb.misc.HJBException;

/**
 * <code>JMSCommandGenerator</code> declares methods used to handle the
 * generation and usage of {@link hjb.jms.cmd.JMSCommand} for a given request.
 * 
 * @author Tim Emiola
 */
public interface JMSCommandGenerator {

    /**
     * Determines if this <code>JMSCommandGenerator</code> can be used to
     * process a request matching <code>path<code>.
     * 
     * @param path the path to be matched - this will normally be obtained using {@link HttpServletRequest#getPathInfo()}
     * @return <code>true</code> if <code>path<code> can be processed, false otherwise.
     * @throws HJBException if a problem occurs while determining whether <code>path</code> can be matched.
     */
    public boolean matches(String path) throws HJBException;

    /**
     * Generates a <code>JMSCommand</code> from the contents of
     * <code>request</code> using the JMS objects that can be accessed via
     * <code>root</code>.
     * 
     * @param request
     *            a <code>HttpServletRequest</code>
     * @param root
     *            the root of a HJB hierarchy
     * @throws HJBException
     *             if a problem occur while the commmand is being generated.
     */
    public void generateCommand(HttpServletRequest request, HJBRoot root)
            throws HJBException;

    /**
     * Returns the <code>JMSCommand</code> generated by
     * {@link #generateCommand(HttpServletRequest, HJBRoot)}.
     * 
     * @return a <code>JMSCommand</code>
     * @throws HJBException
     *             if a problem occurs while retrieving the generated command
     */
    public JMSCommand getGeneratedCommand() throws HJBException;

    /**
     * Determines the <code>JMSCommandRunner</code> to be used to execute the
     * generated command.
     * 
     * @return the <code>JMSCommandRunner</code> to be used to execute the
     *         generated command
     * @throws HJBException
     *             if a problem occurs generating the
     *             <code>JMSCommandRunner</code>
     */
    public JMSCommandRunner getAssignedCommandRunner() throws HJBException;

    /**
     * Sends a response based on the results of executing the generated
     * <code>JMSCommand</code>.
     * 
     * @param response
     *            the <code>HttpServletResponse</code>
     * @throws HJBException
     *             if a problem occurs getting information from the executed
     *             <code>JMSCommand</code>
     * @throws IOException
     *             if a problem occurs while writing the response
     */
    public void sendResponse(HttpServletResponse response) throws HJBException,
            IOException;

}
